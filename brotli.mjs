
// Requires the WASI pr https://github.com/nodejs/node/pull/27850
// node --experimental-modules --experimental-wasm-modules --experimental-wasi-modules brotli.mjs

import * as brotli from './brotli.wasm';

  const input1 = Uint8Array.from([
    0x1b, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe3, 0xb4, 0x0d, 0x00, 0x00,
    0x07, 0x5b, 0x26, 0x31, 0x40, 0x02, 0x00, 0xe0, 0x4e, 0x1b, 0x41, 0x02
  ]);
  var input2 = Int8Array.from([
    0x21, 0xf4, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xa7, 0x6d, 0x00, 0x00,
    0x38, 0xd8, 0x32, 0x89, 0x01, 0x12, 0x00, 0x00, 0x77, 0xda, 0x34, 0x7b,
    0xdb, 0x50, 0x80, 0x02, 0x80, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x31,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x4e, 0xdb, 0x00, 0x00, 0x70, 0xb0,
    0x65, 0x12, 0x03, 0x24, 0x00, 0x00, 0xee, 0xb4, 0x11, 0x24, 0x00
  ]);
  var input3 = Int8Array.from([
    0x1b, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe3, 0xb4, 0x0d, 0x00, 0x00,
    0x07, 0x5b, 0x26, 0x31, 0x40, 0x02, 0x00, 0xe0, 0x4e, 0x1b, 0xa1, 0x80,
    0x20, 0x00
  ]);
const input = input3;

const mem = new DataView(brotli.memory.buffer);
const encoded_buffer = brotli.malloc(input.length);
for (let i = 0; i < input.length; i++) {
  mem.setUint8(encoded_buffer + i, input[i]);
}

const decoded_size = brotli.malloc(4);
const decoded_buffer = brotli.malloc(100);
mem.setInt32(decoded_size, 100, true);
brotli.BrotliDecoderDecompress(input.length, encoded_buffer, decoded_size, decoded_buffer);
const splat_decoded_size = mem.getUint32(decoded_size, true);
const outView = new DataView(brotli.memory.buffer, decoded_buffer, splat_decoded_size);
const utf8Decoder = new TextDecoder();
console.log(utf8Decoder.decode(outView));


